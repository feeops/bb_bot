// Code generated by ent, DO NOT EDIT.

package account

import (
	"bb_bot/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdatedAt, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldEmail, v))
}

// EmailPassword applies equality check predicate on the "emailPassword" field. It's identical to EmailPasswordEQ.
func EmailPassword(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldEmailPassword, v))
}

// BindEmail applies equality check predicate on the "bindEmail" field. It's identical to BindEmailEQ.
func BindEmail(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBindEmail, v))
}

// PostCode applies equality check predicate on the "postCode" field. It's identical to PostCodeEQ.
func PostCode(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPostCode, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPassword, v))
}

// FirstName applies equality check predicate on the "firstName" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "lastName" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLastName, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRegion, v))
}

// IP applies equality check predicate on the "IP" field. It's identical to IPEQ.
func IP(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldIP, v))
}

// WindowName applies equality check predicate on the "windowName" field. It's identical to WindowNameEQ.
func WindowName(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldWindowName, v))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBalance, v))
}

// IPUsed applies equality check predicate on the "IPUsed" field. It's identical to IPUsedEQ.
func IPUsed(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldIPUsed, v))
}

// RefURL applies equality check predicate on the "refURL" field. It's identical to RefURLEQ.
func RefURL(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRefURL, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRemark, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldUpdatedAt, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldEmail, v))
}

// EmailPasswordEQ applies the EQ predicate on the "emailPassword" field.
func EmailPasswordEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldEmailPassword, v))
}

// EmailPasswordNEQ applies the NEQ predicate on the "emailPassword" field.
func EmailPasswordNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldEmailPassword, v))
}

// EmailPasswordIn applies the In predicate on the "emailPassword" field.
func EmailPasswordIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldEmailPassword, vs...))
}

// EmailPasswordNotIn applies the NotIn predicate on the "emailPassword" field.
func EmailPasswordNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldEmailPassword, vs...))
}

// EmailPasswordGT applies the GT predicate on the "emailPassword" field.
func EmailPasswordGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldEmailPassword, v))
}

// EmailPasswordGTE applies the GTE predicate on the "emailPassword" field.
func EmailPasswordGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldEmailPassword, v))
}

// EmailPasswordLT applies the LT predicate on the "emailPassword" field.
func EmailPasswordLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldEmailPassword, v))
}

// EmailPasswordLTE applies the LTE predicate on the "emailPassword" field.
func EmailPasswordLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldEmailPassword, v))
}

// EmailPasswordContains applies the Contains predicate on the "emailPassword" field.
func EmailPasswordContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldEmailPassword, v))
}

// EmailPasswordHasPrefix applies the HasPrefix predicate on the "emailPassword" field.
func EmailPasswordHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldEmailPassword, v))
}

// EmailPasswordHasSuffix applies the HasSuffix predicate on the "emailPassword" field.
func EmailPasswordHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldEmailPassword, v))
}

// EmailPasswordEqualFold applies the EqualFold predicate on the "emailPassword" field.
func EmailPasswordEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldEmailPassword, v))
}

// EmailPasswordContainsFold applies the ContainsFold predicate on the "emailPassword" field.
func EmailPasswordContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldEmailPassword, v))
}

// BindEmailEQ applies the EQ predicate on the "bindEmail" field.
func BindEmailEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBindEmail, v))
}

// BindEmailNEQ applies the NEQ predicate on the "bindEmail" field.
func BindEmailNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldBindEmail, v))
}

// BindEmailIn applies the In predicate on the "bindEmail" field.
func BindEmailIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldBindEmail, vs...))
}

// BindEmailNotIn applies the NotIn predicate on the "bindEmail" field.
func BindEmailNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldBindEmail, vs...))
}

// BindEmailGT applies the GT predicate on the "bindEmail" field.
func BindEmailGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldBindEmail, v))
}

// BindEmailGTE applies the GTE predicate on the "bindEmail" field.
func BindEmailGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldBindEmail, v))
}

// BindEmailLT applies the LT predicate on the "bindEmail" field.
func BindEmailLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldBindEmail, v))
}

// BindEmailLTE applies the LTE predicate on the "bindEmail" field.
func BindEmailLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldBindEmail, v))
}

// BindEmailContains applies the Contains predicate on the "bindEmail" field.
func BindEmailContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldBindEmail, v))
}

// BindEmailHasPrefix applies the HasPrefix predicate on the "bindEmail" field.
func BindEmailHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldBindEmail, v))
}

// BindEmailHasSuffix applies the HasSuffix predicate on the "bindEmail" field.
func BindEmailHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldBindEmail, v))
}

// BindEmailEqualFold applies the EqualFold predicate on the "bindEmail" field.
func BindEmailEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldBindEmail, v))
}

// BindEmailContainsFold applies the ContainsFold predicate on the "bindEmail" field.
func BindEmailContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldBindEmail, v))
}

// PostCodeEQ applies the EQ predicate on the "postCode" field.
func PostCodeEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPostCode, v))
}

// PostCodeNEQ applies the NEQ predicate on the "postCode" field.
func PostCodeNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldPostCode, v))
}

// PostCodeIn applies the In predicate on the "postCode" field.
func PostCodeIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldPostCode, vs...))
}

// PostCodeNotIn applies the NotIn predicate on the "postCode" field.
func PostCodeNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldPostCode, vs...))
}

// PostCodeGT applies the GT predicate on the "postCode" field.
func PostCodeGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldPostCode, v))
}

// PostCodeGTE applies the GTE predicate on the "postCode" field.
func PostCodeGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldPostCode, v))
}

// PostCodeLT applies the LT predicate on the "postCode" field.
func PostCodeLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldPostCode, v))
}

// PostCodeLTE applies the LTE predicate on the "postCode" field.
func PostCodeLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldPostCode, v))
}

// PostCodeContains applies the Contains predicate on the "postCode" field.
func PostCodeContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldPostCode, v))
}

// PostCodeHasPrefix applies the HasPrefix predicate on the "postCode" field.
func PostCodeHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldPostCode, v))
}

// PostCodeHasSuffix applies the HasSuffix predicate on the "postCode" field.
func PostCodeHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldPostCode, v))
}

// PostCodeEqualFold applies the EqualFold predicate on the "postCode" field.
func PostCodeEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldPostCode, v))
}

// PostCodeContainsFold applies the ContainsFold predicate on the "postCode" field.
func PostCodeContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldPostCode, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldPassword, v))
}

// FirstNameEQ applies the EQ predicate on the "firstName" field.
func FirstNameEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "firstName" field.
func FirstNameNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "firstName" field.
func FirstNameIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "firstName" field.
func FirstNameNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "firstName" field.
func FirstNameGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "firstName" field.
func FirstNameGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "firstName" field.
func FirstNameLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "firstName" field.
func FirstNameLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "firstName" field.
func FirstNameContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "firstName" field.
func FirstNameHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "firstName" field.
func FirstNameHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "firstName" field.
func FirstNameEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "firstName" field.
func FirstNameContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "lastName" field.
func LastNameEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "lastName" field.
func LastNameNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "lastName" field.
func LastNameIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "lastName" field.
func LastNameNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "lastName" field.
func LastNameGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "lastName" field.
func LastNameGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "lastName" field.
func LastNameLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "lastName" field.
func LastNameLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "lastName" field.
func LastNameContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "lastName" field.
func LastNameHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "lastName" field.
func LastNameHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "lastName" field.
func LastNameEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "lastName" field.
func LastNameContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldLastName, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldRegion, v))
}

// IPEQ applies the EQ predicate on the "IP" field.
func IPEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "IP" field.
func IPNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "IP" field.
func IPIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "IP" field.
func IPNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "IP" field.
func IPGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "IP" field.
func IPGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "IP" field.
func IPLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "IP" field.
func IPLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "IP" field.
func IPContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "IP" field.
func IPHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "IP" field.
func IPHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "IP" field.
func IPEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "IP" field.
func IPContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldIP, v))
}

// WindowNameEQ applies the EQ predicate on the "windowName" field.
func WindowNameEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldWindowName, v))
}

// WindowNameNEQ applies the NEQ predicate on the "windowName" field.
func WindowNameNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldWindowName, v))
}

// WindowNameIn applies the In predicate on the "windowName" field.
func WindowNameIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldWindowName, vs...))
}

// WindowNameNotIn applies the NotIn predicate on the "windowName" field.
func WindowNameNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldWindowName, vs...))
}

// WindowNameGT applies the GT predicate on the "windowName" field.
func WindowNameGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldWindowName, v))
}

// WindowNameGTE applies the GTE predicate on the "windowName" field.
func WindowNameGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldWindowName, v))
}

// WindowNameLT applies the LT predicate on the "windowName" field.
func WindowNameLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldWindowName, v))
}

// WindowNameLTE applies the LTE predicate on the "windowName" field.
func WindowNameLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldWindowName, v))
}

// WindowNameContains applies the Contains predicate on the "windowName" field.
func WindowNameContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldWindowName, v))
}

// WindowNameHasPrefix applies the HasPrefix predicate on the "windowName" field.
func WindowNameHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldWindowName, v))
}

// WindowNameHasSuffix applies the HasSuffix predicate on the "windowName" field.
func WindowNameHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldWindowName, v))
}

// WindowNameEqualFold applies the EqualFold predicate on the "windowName" field.
func WindowNameEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldWindowName, v))
}

// WindowNameContainsFold applies the ContainsFold predicate on the "windowName" field.
func WindowNameContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldWindowName, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldBalance, v))
}

// IPUsedEQ applies the EQ predicate on the "IPUsed" field.
func IPUsedEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldIPUsed, v))
}

// IPUsedNEQ applies the NEQ predicate on the "IPUsed" field.
func IPUsedNEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldIPUsed, v))
}

// RefURLEQ applies the EQ predicate on the "refURL" field.
func RefURLEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRefURL, v))
}

// RefURLNEQ applies the NEQ predicate on the "refURL" field.
func RefURLNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldRefURL, v))
}

// RefURLIn applies the In predicate on the "refURL" field.
func RefURLIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldRefURL, vs...))
}

// RefURLNotIn applies the NotIn predicate on the "refURL" field.
func RefURLNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldRefURL, vs...))
}

// RefURLGT applies the GT predicate on the "refURL" field.
func RefURLGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldRefURL, v))
}

// RefURLGTE applies the GTE predicate on the "refURL" field.
func RefURLGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldRefURL, v))
}

// RefURLLT applies the LT predicate on the "refURL" field.
func RefURLLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldRefURL, v))
}

// RefURLLTE applies the LTE predicate on the "refURL" field.
func RefURLLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldRefURL, v))
}

// RefURLContains applies the Contains predicate on the "refURL" field.
func RefURLContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldRefURL, v))
}

// RefURLHasPrefix applies the HasPrefix predicate on the "refURL" field.
func RefURLHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldRefURL, v))
}

// RefURLHasSuffix applies the HasSuffix predicate on the "refURL" field.
func RefURLHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldRefURL, v))
}

// RefURLEqualFold applies the EqualFold predicate on the "refURL" field.
func RefURLEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldRefURL, v))
}

// RefURLContainsFold applies the ContainsFold predicate on the "refURL" field.
func RefURLContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldRefURL, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldRemark, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}
