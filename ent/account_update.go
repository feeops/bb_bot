// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bb_bot/ent/account"
	"bb_bot/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AccountUpdate) SetUpdatedAt(t time.Time) *AccountUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetEmail sets the "email" field.
func (au *AccountUpdate) SetEmail(s string) *AccountUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (au *AccountUpdate) SetNillableEmail(s *string) *AccountUpdate {
	if s != nil {
		au.SetEmail(*s)
	}
	return au
}

// SetEmailPassword sets the "emailPassword" field.
func (au *AccountUpdate) SetEmailPassword(s string) *AccountUpdate {
	au.mutation.SetEmailPassword(s)
	return au
}

// SetNillableEmailPassword sets the "emailPassword" field if the given value is not nil.
func (au *AccountUpdate) SetNillableEmailPassword(s *string) *AccountUpdate {
	if s != nil {
		au.SetEmailPassword(*s)
	}
	return au
}

// SetBindEmail sets the "bindEmail" field.
func (au *AccountUpdate) SetBindEmail(s string) *AccountUpdate {
	au.mutation.SetBindEmail(s)
	return au
}

// SetNillableBindEmail sets the "bindEmail" field if the given value is not nil.
func (au *AccountUpdate) SetNillableBindEmail(s *string) *AccountUpdate {
	if s != nil {
		au.SetBindEmail(*s)
	}
	return au
}

// SetPostCode sets the "postCode" field.
func (au *AccountUpdate) SetPostCode(s string) *AccountUpdate {
	au.mutation.SetPostCode(s)
	return au
}

// SetNillablePostCode sets the "postCode" field if the given value is not nil.
func (au *AccountUpdate) SetNillablePostCode(s *string) *AccountUpdate {
	if s != nil {
		au.SetPostCode(*s)
	}
	return au
}

// SetPassword sets the "password" field.
func (au *AccountUpdate) SetPassword(s string) *AccountUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (au *AccountUpdate) SetNillablePassword(s *string) *AccountUpdate {
	if s != nil {
		au.SetPassword(*s)
	}
	return au
}

// SetFirstName sets the "firstName" field.
func (au *AccountUpdate) SetFirstName(s string) *AccountUpdate {
	au.mutation.SetFirstName(s)
	return au
}

// SetNillableFirstName sets the "firstName" field if the given value is not nil.
func (au *AccountUpdate) SetNillableFirstName(s *string) *AccountUpdate {
	if s != nil {
		au.SetFirstName(*s)
	}
	return au
}

// SetLastName sets the "lastName" field.
func (au *AccountUpdate) SetLastName(s string) *AccountUpdate {
	au.mutation.SetLastName(s)
	return au
}

// SetNillableLastName sets the "lastName" field if the given value is not nil.
func (au *AccountUpdate) SetNillableLastName(s *string) *AccountUpdate {
	if s != nil {
		au.SetLastName(*s)
	}
	return au
}

// SetRegion sets the "region" field.
func (au *AccountUpdate) SetRegion(s string) *AccountUpdate {
	au.mutation.SetRegion(s)
	return au
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (au *AccountUpdate) SetNillableRegion(s *string) *AccountUpdate {
	if s != nil {
		au.SetRegion(*s)
	}
	return au
}

// SetIP sets the "IP" field.
func (au *AccountUpdate) SetIP(s string) *AccountUpdate {
	au.mutation.SetIP(s)
	return au
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (au *AccountUpdate) SetNillableIP(s *string) *AccountUpdate {
	if s != nil {
		au.SetIP(*s)
	}
	return au
}

// SetWindowName sets the "windowName" field.
func (au *AccountUpdate) SetWindowName(s string) *AccountUpdate {
	au.mutation.SetWindowName(s)
	return au
}

// SetNillableWindowName sets the "windowName" field if the given value is not nil.
func (au *AccountUpdate) SetNillableWindowName(s *string) *AccountUpdate {
	if s != nil {
		au.SetWindowName(*s)
	}
	return au
}

// SetBalance sets the "balance" field.
func (au *AccountUpdate) SetBalance(f float64) *AccountUpdate {
	au.mutation.ResetBalance()
	au.mutation.SetBalance(f)
	return au
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (au *AccountUpdate) SetNillableBalance(f *float64) *AccountUpdate {
	if f != nil {
		au.SetBalance(*f)
	}
	return au
}

// AddBalance adds f to the "balance" field.
func (au *AccountUpdate) AddBalance(f float64) *AccountUpdate {
	au.mutation.AddBalance(f)
	return au
}

// SetIPUsed sets the "IPUsed" field.
func (au *AccountUpdate) SetIPUsed(b bool) *AccountUpdate {
	au.mutation.SetIPUsed(b)
	return au
}

// SetNillableIPUsed sets the "IPUsed" field if the given value is not nil.
func (au *AccountUpdate) SetNillableIPUsed(b *bool) *AccountUpdate {
	if b != nil {
		au.SetIPUsed(*b)
	}
	return au
}

// SetRefURL sets the "refURL" field.
func (au *AccountUpdate) SetRefURL(s string) *AccountUpdate {
	au.mutation.SetRefURL(s)
	return au
}

// SetNillableRefURL sets the "refURL" field if the given value is not nil.
func (au *AccountUpdate) SetNillableRefURL(s *string) *AccountUpdate {
	if s != nil {
		au.SetRefURL(*s)
	}
	return au
}

// SetRemark sets the "remark" field.
func (au *AccountUpdate) SetRemark(s string) *AccountUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AccountUpdate) SetNillableRemark(s *string) *AccountUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AccountUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := account.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if value, ok := au.mutation.EmailPassword(); ok {
		_spec.SetField(account.FieldEmailPassword, field.TypeString, value)
	}
	if value, ok := au.mutation.BindEmail(); ok {
		_spec.SetField(account.FieldBindEmail, field.TypeString, value)
	}
	if value, ok := au.mutation.PostCode(); ok {
		_spec.SetField(account.FieldPostCode, field.TypeString, value)
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.SetField(account.FieldPassword, field.TypeString, value)
	}
	if value, ok := au.mutation.FirstName(); ok {
		_spec.SetField(account.FieldFirstName, field.TypeString, value)
	}
	if value, ok := au.mutation.LastName(); ok {
		_spec.SetField(account.FieldLastName, field.TypeString, value)
	}
	if value, ok := au.mutation.Region(); ok {
		_spec.SetField(account.FieldRegion, field.TypeString, value)
	}
	if value, ok := au.mutation.IP(); ok {
		_spec.SetField(account.FieldIP, field.TypeString, value)
	}
	if value, ok := au.mutation.WindowName(); ok {
		_spec.SetField(account.FieldWindowName, field.TypeString, value)
	}
	if value, ok := au.mutation.Balance(); ok {
		_spec.SetField(account.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedBalance(); ok {
		_spec.AddField(account.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.IPUsed(); ok {
		_spec.SetField(account.FieldIPUsed, field.TypeBool, value)
	}
	if value, ok := au.mutation.RefURL(); ok {
		_spec.SetField(account.FieldRefURL, field.TypeString, value)
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.SetField(account.FieldRemark, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AccountUpdateOne) SetUpdatedAt(t time.Time) *AccountUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetEmail sets the "email" field.
func (auo *AccountUpdateOne) SetEmail(s string) *AccountUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableEmail(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetEmail(*s)
	}
	return auo
}

// SetEmailPassword sets the "emailPassword" field.
func (auo *AccountUpdateOne) SetEmailPassword(s string) *AccountUpdateOne {
	auo.mutation.SetEmailPassword(s)
	return auo
}

// SetNillableEmailPassword sets the "emailPassword" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableEmailPassword(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetEmailPassword(*s)
	}
	return auo
}

// SetBindEmail sets the "bindEmail" field.
func (auo *AccountUpdateOne) SetBindEmail(s string) *AccountUpdateOne {
	auo.mutation.SetBindEmail(s)
	return auo
}

// SetNillableBindEmail sets the "bindEmail" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableBindEmail(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetBindEmail(*s)
	}
	return auo
}

// SetPostCode sets the "postCode" field.
func (auo *AccountUpdateOne) SetPostCode(s string) *AccountUpdateOne {
	auo.mutation.SetPostCode(s)
	return auo
}

// SetNillablePostCode sets the "postCode" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillablePostCode(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetPostCode(*s)
	}
	return auo
}

// SetPassword sets the "password" field.
func (auo *AccountUpdateOne) SetPassword(s string) *AccountUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillablePassword(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetPassword(*s)
	}
	return auo
}

// SetFirstName sets the "firstName" field.
func (auo *AccountUpdateOne) SetFirstName(s string) *AccountUpdateOne {
	auo.mutation.SetFirstName(s)
	return auo
}

// SetNillableFirstName sets the "firstName" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableFirstName(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetFirstName(*s)
	}
	return auo
}

// SetLastName sets the "lastName" field.
func (auo *AccountUpdateOne) SetLastName(s string) *AccountUpdateOne {
	auo.mutation.SetLastName(s)
	return auo
}

// SetNillableLastName sets the "lastName" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableLastName(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetLastName(*s)
	}
	return auo
}

// SetRegion sets the "region" field.
func (auo *AccountUpdateOne) SetRegion(s string) *AccountUpdateOne {
	auo.mutation.SetRegion(s)
	return auo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableRegion(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetRegion(*s)
	}
	return auo
}

// SetIP sets the "IP" field.
func (auo *AccountUpdateOne) SetIP(s string) *AccountUpdateOne {
	auo.mutation.SetIP(s)
	return auo
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableIP(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetIP(*s)
	}
	return auo
}

// SetWindowName sets the "windowName" field.
func (auo *AccountUpdateOne) SetWindowName(s string) *AccountUpdateOne {
	auo.mutation.SetWindowName(s)
	return auo
}

// SetNillableWindowName sets the "windowName" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableWindowName(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetWindowName(*s)
	}
	return auo
}

// SetBalance sets the "balance" field.
func (auo *AccountUpdateOne) SetBalance(f float64) *AccountUpdateOne {
	auo.mutation.ResetBalance()
	auo.mutation.SetBalance(f)
	return auo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableBalance(f *float64) *AccountUpdateOne {
	if f != nil {
		auo.SetBalance(*f)
	}
	return auo
}

// AddBalance adds f to the "balance" field.
func (auo *AccountUpdateOne) AddBalance(f float64) *AccountUpdateOne {
	auo.mutation.AddBalance(f)
	return auo
}

// SetIPUsed sets the "IPUsed" field.
func (auo *AccountUpdateOne) SetIPUsed(b bool) *AccountUpdateOne {
	auo.mutation.SetIPUsed(b)
	return auo
}

// SetNillableIPUsed sets the "IPUsed" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableIPUsed(b *bool) *AccountUpdateOne {
	if b != nil {
		auo.SetIPUsed(*b)
	}
	return auo
}

// SetRefURL sets the "refURL" field.
func (auo *AccountUpdateOne) SetRefURL(s string) *AccountUpdateOne {
	auo.mutation.SetRefURL(s)
	return auo
}

// SetNillableRefURL sets the "refURL" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableRefURL(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetRefURL(*s)
	}
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AccountUpdateOne) SetRemark(s string) *AccountUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableRemark(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (auo *AccountUpdateOne) Where(ps ...predicate.Account) *AccountUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountUpdateOne) Select(field string, fields ...string) *AccountUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AccountUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := account.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Account.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, account.FieldID)
		for _, f := range fields {
			if !account.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != account.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if value, ok := auo.mutation.EmailPassword(); ok {
		_spec.SetField(account.FieldEmailPassword, field.TypeString, value)
	}
	if value, ok := auo.mutation.BindEmail(); ok {
		_spec.SetField(account.FieldBindEmail, field.TypeString, value)
	}
	if value, ok := auo.mutation.PostCode(); ok {
		_spec.SetField(account.FieldPostCode, field.TypeString, value)
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.SetField(account.FieldPassword, field.TypeString, value)
	}
	if value, ok := auo.mutation.FirstName(); ok {
		_spec.SetField(account.FieldFirstName, field.TypeString, value)
	}
	if value, ok := auo.mutation.LastName(); ok {
		_spec.SetField(account.FieldLastName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Region(); ok {
		_spec.SetField(account.FieldRegion, field.TypeString, value)
	}
	if value, ok := auo.mutation.IP(); ok {
		_spec.SetField(account.FieldIP, field.TypeString, value)
	}
	if value, ok := auo.mutation.WindowName(); ok {
		_spec.SetField(account.FieldWindowName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Balance(); ok {
		_spec.SetField(account.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedBalance(); ok {
		_spec.AddField(account.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.IPUsed(); ok {
		_spec.SetField(account.FieldIPUsed, field.TypeBool, value)
	}
	if value, ok := auo.mutation.RefURL(); ok {
		_spec.SetField(account.FieldRefURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.SetField(account.FieldRemark, field.TypeString, value)
	}
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
