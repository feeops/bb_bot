// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bb_bot/ent/account"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AccountCreate) SetCreatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCreatedAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AccountCreate) SetUpdatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableUpdatedAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetEmail sets the "email" field.
func (ac *AccountCreate) SetEmail(s string) *AccountCreate {
	ac.mutation.SetEmail(s)
	return ac
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ac *AccountCreate) SetNillableEmail(s *string) *AccountCreate {
	if s != nil {
		ac.SetEmail(*s)
	}
	return ac
}

// SetEmailPassword sets the "emailPassword" field.
func (ac *AccountCreate) SetEmailPassword(s string) *AccountCreate {
	ac.mutation.SetEmailPassword(s)
	return ac
}

// SetNillableEmailPassword sets the "emailPassword" field if the given value is not nil.
func (ac *AccountCreate) SetNillableEmailPassword(s *string) *AccountCreate {
	if s != nil {
		ac.SetEmailPassword(*s)
	}
	return ac
}

// SetBindEmail sets the "bindEmail" field.
func (ac *AccountCreate) SetBindEmail(s string) *AccountCreate {
	ac.mutation.SetBindEmail(s)
	return ac
}

// SetNillableBindEmail sets the "bindEmail" field if the given value is not nil.
func (ac *AccountCreate) SetNillableBindEmail(s *string) *AccountCreate {
	if s != nil {
		ac.SetBindEmail(*s)
	}
	return ac
}

// SetPostCode sets the "postCode" field.
func (ac *AccountCreate) SetPostCode(s string) *AccountCreate {
	ac.mutation.SetPostCode(s)
	return ac
}

// SetNillablePostCode sets the "postCode" field if the given value is not nil.
func (ac *AccountCreate) SetNillablePostCode(s *string) *AccountCreate {
	if s != nil {
		ac.SetPostCode(*s)
	}
	return ac
}

// SetPassword sets the "password" field.
func (ac *AccountCreate) SetPassword(s string) *AccountCreate {
	ac.mutation.SetPassword(s)
	return ac
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ac *AccountCreate) SetNillablePassword(s *string) *AccountCreate {
	if s != nil {
		ac.SetPassword(*s)
	}
	return ac
}

// SetFirstName sets the "firstName" field.
func (ac *AccountCreate) SetFirstName(s string) *AccountCreate {
	ac.mutation.SetFirstName(s)
	return ac
}

// SetNillableFirstName sets the "firstName" field if the given value is not nil.
func (ac *AccountCreate) SetNillableFirstName(s *string) *AccountCreate {
	if s != nil {
		ac.SetFirstName(*s)
	}
	return ac
}

// SetLastName sets the "lastName" field.
func (ac *AccountCreate) SetLastName(s string) *AccountCreate {
	ac.mutation.SetLastName(s)
	return ac
}

// SetNillableLastName sets the "lastName" field if the given value is not nil.
func (ac *AccountCreate) SetNillableLastName(s *string) *AccountCreate {
	if s != nil {
		ac.SetLastName(*s)
	}
	return ac
}

// SetRegion sets the "region" field.
func (ac *AccountCreate) SetRegion(s string) *AccountCreate {
	ac.mutation.SetRegion(s)
	return ac
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (ac *AccountCreate) SetNillableRegion(s *string) *AccountCreate {
	if s != nil {
		ac.SetRegion(*s)
	}
	return ac
}

// SetIP sets the "IP" field.
func (ac *AccountCreate) SetIP(s string) *AccountCreate {
	ac.mutation.SetIP(s)
	return ac
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (ac *AccountCreate) SetNillableIP(s *string) *AccountCreate {
	if s != nil {
		ac.SetIP(*s)
	}
	return ac
}

// SetWindowName sets the "windowName" field.
func (ac *AccountCreate) SetWindowName(s string) *AccountCreate {
	ac.mutation.SetWindowName(s)
	return ac
}

// SetNillableWindowName sets the "windowName" field if the given value is not nil.
func (ac *AccountCreate) SetNillableWindowName(s *string) *AccountCreate {
	if s != nil {
		ac.SetWindowName(*s)
	}
	return ac
}

// SetBalance sets the "balance" field.
func (ac *AccountCreate) SetBalance(f float64) *AccountCreate {
	ac.mutation.SetBalance(f)
	return ac
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (ac *AccountCreate) SetNillableBalance(f *float64) *AccountCreate {
	if f != nil {
		ac.SetBalance(*f)
	}
	return ac
}

// SetIPUsed sets the "IPUsed" field.
func (ac *AccountCreate) SetIPUsed(b bool) *AccountCreate {
	ac.mutation.SetIPUsed(b)
	return ac
}

// SetNillableIPUsed sets the "IPUsed" field if the given value is not nil.
func (ac *AccountCreate) SetNillableIPUsed(b *bool) *AccountCreate {
	if b != nil {
		ac.SetIPUsed(*b)
	}
	return ac
}

// SetRefURL sets the "refURL" field.
func (ac *AccountCreate) SetRefURL(s string) *AccountCreate {
	ac.mutation.SetRefURL(s)
	return ac
}

// SetNillableRefURL sets the "refURL" field if the given value is not nil.
func (ac *AccountCreate) SetNillableRefURL(s *string) *AccountCreate {
	if s != nil {
		ac.SetRefURL(*s)
	}
	return ac
}

// SetRemark sets the "remark" field.
func (ac *AccountCreate) SetRemark(s string) *AccountCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ac *AccountCreate) SetNillableRemark(s *string) *AccountCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccountCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := account.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := account.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Email(); !ok {
		v := account.DefaultEmail
		ac.mutation.SetEmail(v)
	}
	if _, ok := ac.mutation.EmailPassword(); !ok {
		v := account.DefaultEmailPassword
		ac.mutation.SetEmailPassword(v)
	}
	if _, ok := ac.mutation.BindEmail(); !ok {
		v := account.DefaultBindEmail
		ac.mutation.SetBindEmail(v)
	}
	if _, ok := ac.mutation.PostCode(); !ok {
		v := account.DefaultPostCode
		ac.mutation.SetPostCode(v)
	}
	if _, ok := ac.mutation.Password(); !ok {
		v := account.DefaultPassword
		ac.mutation.SetPassword(v)
	}
	if _, ok := ac.mutation.FirstName(); !ok {
		v := account.DefaultFirstName
		ac.mutation.SetFirstName(v)
	}
	if _, ok := ac.mutation.LastName(); !ok {
		v := account.DefaultLastName
		ac.mutation.SetLastName(v)
	}
	if _, ok := ac.mutation.Region(); !ok {
		v := account.DefaultRegion
		ac.mutation.SetRegion(v)
	}
	if _, ok := ac.mutation.IP(); !ok {
		v := account.DefaultIP
		ac.mutation.SetIP(v)
	}
	if _, ok := ac.mutation.WindowName(); !ok {
		v := account.DefaultWindowName
		ac.mutation.SetWindowName(v)
	}
	if _, ok := ac.mutation.Balance(); !ok {
		v := account.DefaultBalance
		ac.mutation.SetBalance(v)
	}
	if _, ok := ac.mutation.IPUsed(); !ok {
		v := account.DefaultIPUsed
		ac.mutation.SetIPUsed(v)
	}
	if _, ok := ac.mutation.RefURL(); !ok {
		v := account.DefaultRefURL
		ac.mutation.SetRefURL(v)
	}
	if _, ok := ac.mutation.Remark(); !ok {
		v := account.DefaultRemark
		ac.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Account.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Account.updated_at"`)}
	}
	if _, ok := ac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Account.email"`)}
	}
	if _, ok := ac.mutation.EmailPassword(); !ok {
		return &ValidationError{Name: "emailPassword", err: errors.New(`ent: missing required field "Account.emailPassword"`)}
	}
	if _, ok := ac.mutation.BindEmail(); !ok {
		return &ValidationError{Name: "bindEmail", err: errors.New(`ent: missing required field "Account.bindEmail"`)}
	}
	if _, ok := ac.mutation.PostCode(); !ok {
		return &ValidationError{Name: "postCode", err: errors.New(`ent: missing required field "Account.postCode"`)}
	}
	if _, ok := ac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Account.password"`)}
	}
	if _, ok := ac.mutation.FirstName(); !ok {
		return &ValidationError{Name: "firstName", err: errors.New(`ent: missing required field "Account.firstName"`)}
	}
	if _, ok := ac.mutation.LastName(); !ok {
		return &ValidationError{Name: "lastName", err: errors.New(`ent: missing required field "Account.lastName"`)}
	}
	if _, ok := ac.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "Account.region"`)}
	}
	if _, ok := ac.mutation.IP(); !ok {
		return &ValidationError{Name: "IP", err: errors.New(`ent: missing required field "Account.IP"`)}
	}
	if _, ok := ac.mutation.WindowName(); !ok {
		return &ValidationError{Name: "windowName", err: errors.New(`ent: missing required field "Account.windowName"`)}
	}
	if _, ok := ac.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Account.balance"`)}
	}
	if _, ok := ac.mutation.IPUsed(); !ok {
		return &ValidationError{Name: "IPUsed", err: errors.New(`ent: missing required field "Account.IPUsed"`)}
	}
	if _, ok := ac.mutation.RefURL(); !ok {
		return &ValidationError{Name: "refURL", err: errors.New(`ent: missing required field "Account.refURL"`)}
	}
	if _, ok := ac.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Account.remark"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(account.Table, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(account.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ac.mutation.EmailPassword(); ok {
		_spec.SetField(account.FieldEmailPassword, field.TypeString, value)
		_node.EmailPassword = value
	}
	if value, ok := ac.mutation.BindEmail(); ok {
		_spec.SetField(account.FieldBindEmail, field.TypeString, value)
		_node.BindEmail = value
	}
	if value, ok := ac.mutation.PostCode(); ok {
		_spec.SetField(account.FieldPostCode, field.TypeString, value)
		_node.PostCode = value
	}
	if value, ok := ac.mutation.Password(); ok {
		_spec.SetField(account.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ac.mutation.FirstName(); ok {
		_spec.SetField(account.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := ac.mutation.LastName(); ok {
		_spec.SetField(account.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := ac.mutation.Region(); ok {
		_spec.SetField(account.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := ac.mutation.IP(); ok {
		_spec.SetField(account.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := ac.mutation.WindowName(); ok {
		_spec.SetField(account.FieldWindowName, field.TypeString, value)
		_node.WindowName = value
	}
	if value, ok := ac.mutation.Balance(); ok {
		_spec.SetField(account.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := ac.mutation.IPUsed(); ok {
		_spec.SetField(account.FieldIPUsed, field.TypeBool, value)
		_node.IPUsed = value
	}
	if value, ok := ac.mutation.RefURL(); ok {
		_spec.SetField(account.FieldRefURL, field.TypeString, value)
		_node.RefURL = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.SetField(account.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	return _node, _spec
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	err      error
	builders []*AccountCreate
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
