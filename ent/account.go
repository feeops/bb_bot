// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bb_bot/ent/account"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// EmailPassword holds the value of the "emailPassword" field.
	EmailPassword string `json:"emailPassword,omitempty"`
	// BindEmail holds the value of the "bindEmail" field.
	BindEmail string `json:"bindEmail,omitempty"`
	// PostCode holds the value of the "postCode" field.
	PostCode string `json:"postCode,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// FirstName holds the value of the "firstName" field.
	FirstName string `json:"firstName,omitempty"`
	// LastName holds the value of the "lastName" field.
	LastName string `json:"lastName,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// IP holds the value of the "IP" field.
	IP string `json:"IP,omitempty"`
	// 窗口名称
	WindowName string `json:"windowName,omitempty"`
	// 账号余额
	Balance float64 `json:"balance,omitempty"`
	// IPUsed holds the value of the "IPUsed" field.
	IPUsed bool `json:"IPUsed,omitempty"`
	// 推广链接
	RefURL string `json:"refURL,omitempty"`
	// 备注
	Remark       string `json:"remark,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldIPUsed:
			values[i] = new(sql.NullBool)
		case account.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case account.FieldID:
			values[i] = new(sql.NullInt64)
		case account.FieldEmail, account.FieldEmailPassword, account.FieldBindEmail, account.FieldPostCode, account.FieldPassword, account.FieldFirstName, account.FieldLastName, account.FieldRegion, account.FieldIP, account.FieldWindowName, account.FieldRefURL, account.FieldRemark:
			values[i] = new(sql.NullString)
		case account.FieldCreatedAt, account.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case account.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case account.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case account.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				a.Email = value.String
			}
		case account.FieldEmailPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field emailPassword", values[i])
			} else if value.Valid {
				a.EmailPassword = value.String
			}
		case account.FieldBindEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bindEmail", values[i])
			} else if value.Valid {
				a.BindEmail = value.String
			}
		case account.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postCode", values[i])
			} else if value.Valid {
				a.PostCode = value.String
			}
		case account.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				a.Password = value.String
			}
		case account.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstName", values[i])
			} else if value.Valid {
				a.FirstName = value.String
			}
		case account.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastName", values[i])
			} else if value.Valid {
				a.LastName = value.String
			}
		case account.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				a.Region = value.String
			}
		case account.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IP", values[i])
			} else if value.Valid {
				a.IP = value.String
			}
		case account.FieldWindowName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field windowName", values[i])
			} else if value.Valid {
				a.WindowName = value.String
			}
		case account.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				a.Balance = value.Float64
			}
		case account.FieldIPUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IPUsed", values[i])
			} else if value.Valid {
				a.IPUsed = value.Bool
			}
		case account.FieldRefURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refURL", values[i])
			} else if value.Valid {
				a.RefURL = value.String
			}
		case account.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				a.Remark = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Account.
// This includes values selected through modifiers, order, etc.
func (a *Account) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return NewAccountClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(a.Email)
	builder.WriteString(", ")
	builder.WriteString("emailPassword=")
	builder.WriteString(a.EmailPassword)
	builder.WriteString(", ")
	builder.WriteString("bindEmail=")
	builder.WriteString(a.BindEmail)
	builder.WriteString(", ")
	builder.WriteString("postCode=")
	builder.WriteString(a.PostCode)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(a.Password)
	builder.WriteString(", ")
	builder.WriteString("firstName=")
	builder.WriteString(a.FirstName)
	builder.WriteString(", ")
	builder.WriteString("lastName=")
	builder.WriteString(a.LastName)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(a.Region)
	builder.WriteString(", ")
	builder.WriteString("IP=")
	builder.WriteString(a.IP)
	builder.WriteString(", ")
	builder.WriteString("windowName=")
	builder.WriteString(a.WindowName)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", a.Balance))
	builder.WriteString(", ")
	builder.WriteString("IPUsed=")
	builder.WriteString(fmt.Sprintf("%v", a.IPUsed))
	builder.WriteString(", ")
	builder.WriteString("refURL=")
	builder.WriteString(a.RefURL)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(a.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account
